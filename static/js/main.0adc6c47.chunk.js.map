{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Page","method","console","log","privKeyRef","useRef","pubKeyRef","msgRef","signRef","cryptMsgRef","useSearchParams","searchParams","setSearchParams","getKeyPair","seed","sodium","from_base64","current","value","crypto_sign_seed_keypair","genPubKey","publicKey","to_base64","useEffect","ready","then","has","get","type","size","ref","onClick","crypto_sign_keypair","privateKey","crypto_sign_ed25519_sk_to_seed","sk","pk","rows","cols","crypto_sign_ed25519_pk_to_curve25519","msg","trim","cryptMsg","crypto_box_curve25519xchacha20poly1305_seal","crypto_sign_ed25519_sk_to_curve25519","crypto_box_curve25519xchacha20poly1305_seal_open","to_string","signature","crypto_sign_detached","crypto_sign_verify_detached","alert","href","target","rel","App","path","element","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0adc6c47.chunk.js","sourcesContent":["import sodium from 'libsodium-wrappers-sumo';\nimport { useRef, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate, useSearchParams } from \"react-router-dom\";\n\nfunction App() {\n  return <BrowserRouter>\n    <Routes>\n      <Route path=\"/ed25519-online/\" element={<Navigate to=\"/ed25519-online/encrypt\" />} />\n      <Route path=\"/ed25519-online/sign\" element={<Page method=\"sign\" />} />\n      <Route path=\"/ed25519-online/encrypt\" element={<Page method=\"encrypt\" />} />\n    </Routes>\n  </BrowserRouter>;\n}\n\nfunction Page({ method }) {\n  console.log(method);\n  let privKeyRef = useRef();\n  let pubKeyRef = useRef();\n  let msgRef = useRef();\n  let signRef = useRef();\n  let cryptMsgRef = useRef();\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    sodium.ready.then(() => {\n      if(searchParams.has(\"sk\")) {\n        privKeyRef.current.value = searchParams.get(\"sk\");\n        genPubKey();\n      } else if(searchParams.has(\"pk\")) {\n        pubKeyRef.current.value = searchParams.get(\"pk\");\n      }\n    })\n  })\n\n  function getKeyPair() {\n    let seed = sodium.from_base64(privKeyRef.current.value);\n    return sodium.crypto_sign_seed_keypair(seed);\n  }\n\n  function genPrivKey() {\n    let {publicKey, privateKey} = sodium.crypto_sign_keypair();\n    let seed = sodium.crypto_sign_ed25519_sk_to_seed(privateKey);\n    privKeyRef.current.value = sodium.to_base64(seed);\n    pubKeyRef.current.value = sodium.to_base64(publicKey);\n  }\n\n  function genPubKey() {\n    let {publicKey} = getKeyPair();\n    pubKeyRef.current.value = sodium.to_base64(publicKey);\n  }\n\n  function sign() {\n    let {privateKey} = getKeyPair();\n    let msg = msgRef.current.value.trim();\n    let signature = sodium.crypto_sign_detached(msg, privateKey);\n    signRef.current.value = sodium.to_base64(signature);\n  }\n\n  function encrypt() {\n    let {publicKey} = getKeyPair();\n    let pk = sodium.crypto_sign_ed25519_pk_to_curve25519(publicKey);\n    let msg = msgRef.current.value.trim();\n    let cryptMsg = sodium.crypto_box_curve25519xchacha20poly1305_seal(msg, pk);\n    cryptMsgRef.current.value = sodium.to_base64(cryptMsg);\n  }\n\n  function decrypt() {\n    let {publicKey, privateKey} = getKeyPair();\n    let pk = sodium.crypto_sign_ed25519_pk_to_curve25519(publicKey);\n    let sk = sodium.crypto_sign_ed25519_sk_to_curve25519(privateKey);\n    let cryptMsg = sodium.from_base64(cryptMsgRef.current.value);\n    let msg = sodium.crypto_box_curve25519xchacha20poly1305_seal_open(cryptMsg, pk, sk);\n    msgRef.current.value = sodium.to_string(msg);\n  }\n\n  function verify() {\n    let publicKey = sodium.from_base64(pubKeyRef.current.value);\n    let msg = msgRef.current.value.trim();\n    let signature = sodium.from_base64(signRef.current.value);\n    let result = sodium.crypto_sign_verify_detached(signature, msg, publicKey);\n    if(result) {\n      alert(\"签名有效\");\n    } else {\n      alert(\"签名无效\");\n    }\n  }\n\n  function genPrivKeyLink() {\n    setSearchParams({ sk: privKeyRef.current.value });\n  }\n\n  function genPubKeyLink() {\n    setSearchParams({ pk: pubKeyRef.current.value });\n  }\n\n  return (\n    <div>\n      <p>输入私钥：<input type=\"text\" size=\"50\" ref={privKeyRef} /><button onClick={genPrivKey}>生成私钥公钥</button><button onClick={genPrivKeyLink}>生成私钥链接</button></p>\n      <p>输入公钥：<input type=\"text\" size=\"50\" ref={pubKeyRef} /><button onClick={genPubKey}>从私钥生成公钥</button><button onClick={genPubKeyLink}>生成公钥链接</button></p>\n      {method === \"encrypt\" ? <div>\n        <p>输入消息：<textarea rows=\"20\" cols=\"60\" ref={msgRef}></textarea><button onClick={encrypt}>加密</button></p>\n        <p>输入密文：<textarea rows=\"20\" cols=\"60\" ref={cryptMsgRef}></textarea><button onClick={decrypt}>解密</button></p>\n        <p>说明：本页面实现了一套非对称加密解密系统。使用方法如下：</p>\n        <p><i>解密者</i>：生成私钥公钥，并点击“生成<b>私钥</b>链接”。<i>该操作会修改地址栏。</i>复制地址栏并妥善保管，该地址将用于解密。然后点击“生成<b>公钥</b>链接”，复制地址栏并公开，其他人可通过该地址加密。</p>\n        <p><i>加密者</i>：收到<i>解密者</i>发送的公钥链接后点击，并在“消息”栏中输入待加密的消息，点击“加密”，并发布“密文”栏中的消息。</p>\n        <p><i>解密者</i>：收到<i>加密者</i>发送的消息后，打开自己的私钥地址，在“密文”栏中输入消息，点击“解密”，查看加密者发送的消息。</p>\n        <p>总之：所有拥有公钥的人均可以加密，但只有拥有对应私钥的人可以进行解密。请注意，一旦私钥泄露，之前和将来用对应公钥加密的所有消息都将可被解密。</p>\n      </div> : method === \"sign\" ? <div>\n        <p>输入消息：<textarea rows=\"20\" cols=\"60\" ref={msgRef}></textarea><button onClick={sign}>签名</button></p>\n        <p>输入签名：<input type=\"text\" size=\"60\" ref={signRef}></input><button onClick={verify}>验证签名</button></p>\n        <p>说明：本页面实现了一套公钥签名系统，使用方法如下：</p>\n        <p><i>权威人士</i>：生成私钥公钥，并点击“生成<b>私钥</b>链接”。<i>该操作会修改地址栏。</i>复制地址栏并妥善保管，该地址将用于签名。然后点击“生成<b>公钥</b>链接”，复制地址栏并公开，其他人可通过该地址验证。</p>\n        <p><i>权威人士</i>：输入一条消息，点击“签名”，获得签名，将消息和签名一同发布。</p>\n        <p><i>群众</i>：收到<i>权威人士</i>发送的公钥链接后点击，并在“消息”栏中输入待验证的消息，在“签名”栏中输入签名，点击“验证”判断签名是否合法（是否确实来自权威人士）。</p>\n        <p>总之：任何拥有公钥的人都可以验证签名，但只有拥有对应私钥的人可以进行签名。请注意，一旦私钥泄露，任何人都可以用该私钥制造合法的签名。</p>\n      </div> : null\n      }\n      <p>本项目基于 <a href=\"https://github.com/jedisct1/libsodium.js\" target=\"_blank\" rel=\"noreferrer\">libsodium.js</a>.</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}